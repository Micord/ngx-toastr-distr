{"version":3,"sources":["ng://ngx-toastr/toastr/toast.directive.ts","node_modules/tslib/tslib.es6.js","ng://ngx-toastr/toastr/toastr-config.ts","ng://ngx-toastr/portal/portal.ts","ng://ngx-toastr/portal/dom-portal-host.ts","ng://ngx-toastr/overlay/overlay-ref.ts","ng://ngx-toastr/overlay/overlay-container.ts","ng://ngx-toastr/overlay/overlay.ts","ng://ngx-toastr/toastr/toast-injector.ts","ng://ngx-toastr/toastr/toast-token.ts","ng://ngx-toastr/toastr/toastr.service.ts","ng://ngx-toastr/toastr/toast.component.ts","ng://ngx-toastr/toastr/default-config.ts","ng://ngx-toastr/toastr/toastr.module.ts","ng://ngx-toastr/toastr/toast-noanimation.component.ts"],"names":["ToastContainerDirective","el","this","prototype","getContainerElement","nativeElement","Directive","args","selector","exportAs","ElementRef","NgModule","declarations","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","ToastPackage","toastId","config","message","title","toastType","toastRef","_this","Subject","afterClosed","subscribe","_onAction","complete","_onTap","triggerTap","next","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","ComponentPortal","component","injector","attach","host","newestOnTop","_attachedHost","detach","undefined","defineProperty","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_super","_hostDomElement","_componentFactoryResolver","_appRef","__extends","__","constructor","create","tslib_1.__extends","componentRef","componentFactory","resolveComponentFactory","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayRef","_portalHost","OverlayContainer","_containerElement","_createContainer","container","document","createElement","classList","add","body","Overlay","_overlayContainer","Map","positionClass","overlayContainer","_createOverlayRef","getPaneElement","_paneElements","get","set","_createPaneElement","pane","id","_createPortalHost","Injectable","ComponentFactoryResolver","ApplicationRef","OVERLAY_PROVIDERS","ToastRef","_overlayRef","manualClose","_manualClose","manualClosed","timeoutReset","_resetTimeout","close","_afterClosed","_activate","isInactive","isStopped","activate","afterActivate","resetTimeout","ToastInjector","_toastPackage","_parentInjector","token","notFoundValue","TOAST_CONFIG","InjectionToken","ToastrService","overlay","_injector","sanitizer","ngZone","defaultConfig","defaults","toastrConfig","iconClasses","show","override","type","_preBuildNotification","applyConfig","success","error","info","warning","clear","_b","__values","o","m","Symbol","iterator","value","done","tslib_1.__values","toasts","_c","toast","remove","found","_findToast","activeToast","splice","index","currentlyActive","maxOpened","isDuplicate","resetOnDuplicate","componentInstance","onActivateTick","run","_buildNotification","toastComponent","Error","preventDuplicates","resetTimeoutOnDuplicate","previousToastMessage","keepInactive","autoDismiss","overlayRef","trustedMessage","enableHtml","bypassSecurityTrustHtml","toastPackage","toastInjector","_component","ins","onShown","onHidden","setTimeout","push","Inject","Injector","DomSanitizer","NgZone","Toast","toastrService","params","easeTime","easing","options","originalTimeout","timeOut","toastClasses","toastClass","sub","activateToast","sub1","sub2","ngOnDestroy","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","state","disableTimeOut","outsideTimeout","hideTime","Date","getTime","progressBar","outsideInterval","updateProgress","width","now","remaining","progressAnimation","tapToast","stickAround","delayedHideToast","extendedTimeOut","func","runOutsideAngular","runInsideAngular","setInterval","Component","template","animations","trigger","style","display","opacity","transition","animate","preserveWhitespaces","HostBinding","HostListener","DefaultGlobalConfig","ToastrModule","parentModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","entryComponents","decorators","Optional","SkipSelf","ToastNoAnimation","appRef","tick"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  NgModule,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[toastContainer]',\r\n  exportAs: 'toastContainer',\r\n})\r\nexport class ToastContainerDirective {\r\n  constructor(private el: ElementRef) { }\r\n  getContainerElement(): HTMLElement {\r\n    return this.el.nativeElement;\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ToastContainerDirective],\r\n  exports: [ToastContainerDirective],\r\n})\r\nexport class ToastContainerModule {}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { SafeHtml } from '@angular/platform-browser';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ComponentType } from '../portal/portal';\r\nimport { ToastRef } from './toast-injector';\r\n\r\n/**\r\n * Configuration for an individual toast.\r\n */\r\nexport interface IndividualConfig {\r\n  /**\r\n   * disable both timeOut and extendedTimeOut\r\n   * default: false\r\n   */\r\n  disableTimeOut: boolean;\r\n  /**\r\n   * toast time to live in milliseconds\r\n   * default: 5000\r\n   */\r\n  timeOut: number;\r\n  /**\r\n   * toast show close button\r\n   * default: false\r\n   */\r\n  closeButton: boolean;\r\n  /**\r\n   * time to close after a user hovers over toast\r\n   * default: 1000\r\n   */\r\n  extendedTimeOut: number;\r\n  /**\r\n   * show toast progress bar\r\n   * default: false\r\n   */\r\n  progressBar: boolean;\r\n\r\n  /**\r\n   * changes toast progress bar animation\r\n   * default: decreasing\r\n   */\r\n  progressAnimation?: 'increasing' | 'decreasing';\r\n  /**\r\n   * render html in toast message (possibly unsafe)\r\n   * default: false\r\n   */\r\n  enableHtml: boolean;\r\n  /**\r\n   * css class on toast component\r\n   * default: toast\r\n   */\r\n  toastClass: string;\r\n  /**\r\n   * css class on toast container\r\n   * default: toast-top-right\r\n   */\r\n  positionClass: string;\r\n  /**\r\n   * css class on toast title\r\n   * default: toast-title\r\n   */\r\n  titleClass: string;\r\n  /**\r\n   * css class on toast message\r\n   * default: toast-message\r\n   */\r\n  messageClass: string;\r\n  /**\r\n   * animation easing on toast\r\n   * default: ease-in\r\n   */\r\n  easing: string;\r\n  /**\r\n   * animation ease time on toast\r\n   * default: 300\r\n   */\r\n  easeTime: string | number;\r\n  /**\r\n   * clicking on toast dismisses it\r\n   * default: true\r\n   */\r\n  tapToDismiss: boolean;\r\n  /**\r\n   * Angular toast component to be shown\r\n   * default: Toast\r\n   */\r\n  toastComponent: ComponentType<any>;\r\n  /**\r\n   * Helps show toast from a websocket or from event outside Angular\r\n   * default: false\r\n   */\r\n  onActivateTick: boolean;\r\n}\r\n\r\nexport interface ToastrIconClasses {\r\n  error: string;\r\n  info: string;\r\n  success: string;\r\n  warning: string;\r\n}\r\n\r\n/**\r\n * Global Toast configuration\r\n * Includes all IndividualConfig\r\n */\r\nexport interface GlobalConfig extends IndividualConfig {\r\n  /**\r\n   * max toasts opened. Toasts will be queued\r\n   * Zero is unlimited\r\n   * default: 0\r\n   */\r\n  maxOpened: number;\r\n  /**\r\n   * dismiss current toast when max is reached\r\n   * default: false\r\n   */\r\n  autoDismiss: boolean;\r\n  iconClasses: Partial<ToastrIconClasses>;\r\n  /**\r\n   * New toast placement\r\n   * default: true\r\n   */\r\n  newestOnTop: boolean;\r\n  /**\r\n   * block duplicate messages\r\n   * default: false\r\n   */\r\n  preventDuplicates: boolean;\r\n\r\n  /**\r\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\r\n   * default: false\r\n   */\r\n  resetTimeoutOnDuplicate: boolean;\r\n}\r\n\r\n/**\r\n * Everything a toast needs to launch\r\n */\r\nexport class ToastPackage {\r\n  private _onTap = new Subject<any>();\r\n  private _onAction = new Subject<any>();\r\n\r\n  constructor(\r\n    public toastId: number,\r\n    public config: IndividualConfig,\r\n    public message: string | SafeHtml | null | undefined,\r\n    public title: string | undefined,\r\n    public toastType: string,\r\n    public toastRef: ToastRef<any>\r\n  ) {\r\n    this.toastRef.afterClosed().subscribe(() => {\r\n      this._onAction.complete();\r\n      this._onTap.complete();\r\n    });\r\n  }\r\n\r\n  /** Fired on click */\r\n  triggerTap() {\r\n    this._onTap.next();\r\n    if (this.config.tapToDismiss) {\r\n      this._onTap.complete();\r\n    }\r\n  }\r\n\r\n  onTap(): Observable<any> {\r\n    return this._onTap.asObservable();\r\n  }\r\n\r\n  /** available for use in custom toast */\r\n  triggerAction(action?: any) {\r\n    this._onAction.next(action);\r\n  }\r\n\r\n  onAction(): Observable<any> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\r\n\r\n/* tslint:disable:no-empty-interface */\r\nexport interface GlobalToastrConfig extends GlobalConfig {}\r\nexport interface IndividualToastrConfig extends IndividualConfig {}\r\nexport interface ToastrConfig extends IndividualConfig {}\r\n","import {\r\n  ComponentRef,\r\n  Injector,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\r\n\r\n\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nexport class ComponentPortal<T> {\r\n  private _attachedHost?: BasePortalHost;\r\n  /** The type of the component that will be instantiated for attachment. */\r\n  component: ComponentType<T>;\r\n\r\n  /**\r\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalHost.\r\n   * The origin necessary when the host is outside of the Angular application context.\r\n   */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /** Injector used for the instantiation of the component. */\r\n  injector: Injector;\r\n\r\n  constructor(component: ComponentType<T>, injector: Injector) {\r\n    this.component = component;\r\n    this.injector = injector;\r\n  }\r\n\r\n  /** Attach this portal to a host. */\r\n  attach(host: BasePortalHost, newestOnTop: boolean) {\r\n    this._attachedHost = host;\r\n    return host.attach(this, newestOnTop);\r\n  }\r\n\r\n  /** Detach this portal from its host */\r\n  detach() {\r\n    const host = this._attachedHost;\r\n    if (host) {\r\n      this._attachedHost = undefined;\r\n      return host.detach();\r\n    }\r\n  }\r\n\r\n  /** Whether this portal is attached to a host. */\r\n  get isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\r\n\r\n  /**\r\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\r\n   * the PortalHost when it is performing an `attach()` or `detach()`.\r\n   */\r\n  setAttachedHost(host?: BasePortalHost) {\r\n    this._attachedHost = host;\r\n  }\r\n}\r\n\r\n/**\r\n * Partial implementation of PortalHost that only deals with attaching a\r\n * ComponentPortal\r\n */\r\nexport abstract class BasePortalHost {\r\n  /** The portal currently attached to the host. */\r\n  private _attachedPortal?: ComponentPortal<any>;\r\n\r\n  /** A function that will permanently dispose this host. */\r\n  private _disposeFn?: () => void;\r\n\r\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\r\n    this._attachedPortal = portal;\r\n    return this.attachComponentPortal(portal, newestOnTop);\r\n  }\r\n\r\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\r\n\r\n  detach() {\r\n    if (this._attachedPortal) {\r\n      this._attachedPortal.setAttachedHost();\r\n    }\r\n\r\n    this._attachedPortal = undefined;\r\n    if (this._disposeFn) {\r\n      this._disposeFn();\r\n      this._disposeFn = undefined;\r\n    }\r\n  }\r\n\r\n  setDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n} from '@angular/core';\r\nimport { BasePortalHost, ComponentPortal } from './portal';\r\n\r\n/**\r\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n *\r\n * This is the only part of the portal core that directly touches the DOM.\r\n */\r\nexport class DomPortalHost extends BasePortalHost {\r\n  constructor(\r\n    private _hostDomElement: Element,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private _appRef: ApplicationRef,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n   * @param portal Portal to be attached\r\n   */\r\n  attachComponentPortal<T>(\r\n    portal: ComponentPortal<T>,\r\n    newestOnTop: boolean,\r\n  ): ComponentRef<T> {\r\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\r\n      portal.component,\r\n    );\r\n    let componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the ChangeDetector for that component to the application (which\r\n    // happens automatically when using a ViewContainer).\r\n    componentRef = componentFactory.create(portal.injector);\r\n\r\n    // When creating a component outside of a ViewContainer, we need to manually register\r\n    // its ChangeDetector with the application. This API is unfortunately not yet published\r\n    // in Angular core. The change detector must also be deregistered when the component\r\n    // is destroyed to prevent memory leaks.\r\n    this._appRef.attachView(componentRef.hostView);\r\n\r\n    this.setDisposeFn(() => {\r\n      this._appRef.detachView(componentRef.hostView);\r\n      componentRef.destroy();\r\n    });\r\n\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    if (newestOnTop) {\r\n      this._hostDomElement.insertBefore(\r\n        this._getComponentRootNode(componentRef),\r\n        this._hostDomElement.firstChild,\r\n      );\r\n    } else {\r\n      this._hostDomElement.appendChild(\r\n        this._getComponentRootNode(componentRef),\r\n      );\r\n    }\r\n\r\n    return componentRef;\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef {\r\n  constructor(private _portalHost: BasePortalHost) {}\r\n\r\n  attach(\r\n    portal: ComponentPortal<any>,\r\n    newestOnTop: boolean = true,\r\n  ): ComponentRef<any> {\r\n    return this._portalHost.attach(portal, newestOnTop);\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns Resolves when the overlay has been detached.\r\n   */\r\n  detach() {\r\n    return this._portalHost.detach();\r\n  }\r\n}\r\n","/**\r\n * The OverlayContainer is the container in which all overlays will load.\r\n * It should be provided in the root component to ensure it is properly shared.\r\n */\r\nexport class OverlayContainer {\r\n  private _containerElement: HTMLElement;\r\n\r\n  /**\r\n   * This method returns the overlay container element.  It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  private _createContainer(): void {\r\n    const container = document.createElement('div');\r\n    container.classList.add('overlay-container');\r\n    document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n","import { ApplicationRef, ComponentFactoryResolver, Injectable } from '@angular/core';\r\nimport { DomPortalHost } from '../portal/dom-portal-host';\r\nimport { OverlayRef } from './overlay-ref';\r\n\r\nimport { ToastContainerDirective } from '../toastr/toast.directive';\r\nimport { OverlayContainer } from './overlay-container';\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n */\r\n @Injectable()\r\n  export class Overlay {\r\n    // Namespace panes by overlay container\r\n    private _paneElements: Map<ToastContainerDirective, {string?: HTMLElement}> = new Map();\r\n\r\n    constructor(private _overlayContainer: OverlayContainer,\r\n                private _componentFactoryResolver: ComponentFactoryResolver,\r\n                private _appRef: ApplicationRef) {}\r\n  /**\r\n   * Creates an overlay.\r\n   * @returns A reference to the created overlay.\r\n   */\r\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\r\n    // get existing pane if possible\r\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\r\n  }\r\n\r\n  getPaneElement(positionClass: string = '', overlayContainer?: ToastContainerDirective): HTMLElement {\r\n    if (!this._paneElements.get(overlayContainer)) {\r\n      this._paneElements.set(overlayContainer, {});\r\n    }\r\n\r\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\r\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\r\n    }\r\n\r\n    return this._paneElements.get(overlayContainer)[positionClass];\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\r\n    const pane = document.createElement('div');\r\n    pane.id = 'toast-container';\r\n    pane.classList.add(positionClass);\r\n    pane.classList.add('toast-container');\r\n\r\n    if (!overlayContainer) {\r\n      this._overlayContainer.getContainerElement().appendChild(pane);\r\n    } else {\r\n      overlayContainer.getContainerElement().appendChild(pane);\r\n    }\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalHost into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal host.\r\n   * @returns A portal host for the given DOM element.\r\n   */\r\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\r\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\r\n  }\r\n\r\n  /**\r\n   * Creates an OverlayRef for an overlay in the given DOM element.\r\n   * @param pane DOM element for the overlay\r\n   */\r\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\r\n    return new OverlayRef(this._createPortalHost(pane));\r\n  }\r\n}\r\n\r\n\r\n/** Providers for Overlay and its related injectables. */\r\nexport const OVERLAY_PROVIDERS = [\r\n  Overlay,\r\n  OverlayContainer,\r\n];\r\n","import { Injector } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { OverlayRef } from '../overlay/overlay-ref';\r\nimport { ToastPackage } from './toastr-config';\r\n\r\n/**\r\n * Reference to a toast opened via the Toastr service.\r\n */\r\nexport class ToastRef<T> {\r\n  /** The instance of component opened into the toast. */\r\n  componentInstance: T;\r\n\r\n  /** Subject for notifying the user that the toast has finished closing. */\r\n  private _afterClosed = new Subject<any>();\r\n  /** triggered when toast is activated */\r\n  private _activate = new Subject<any>();\r\n  /** notifies the toast that it should close before the timeout */\r\n  private _manualClose = new Subject<any>();\r\n  /** notifies the toast that it should reset the timeouts */\r\n  private _resetTimeout = new Subject<any>();\r\n\r\n  constructor(private _overlayRef: OverlayRef) {}\r\n\r\n  manualClose() {\r\n    this._manualClose.next();\r\n    this._manualClose.complete();\r\n  }\r\n\r\n  manualClosed(): Observable<any> {\r\n    return this._manualClose.asObservable();\r\n  }\r\n\r\n  timeoutReset(): Observable<any> {\r\n    return this._resetTimeout.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Close the toast.\r\n   */\r\n  close(): void {\r\n    this._overlayRef.detach();\r\n    this._afterClosed.next();\r\n    this._manualClose.next();\r\n    this._afterClosed.complete();\r\n    this._manualClose.complete();\r\n    this._activate.complete();\r\n    this._resetTimeout.complete();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the toast is finished closing. */\r\n  afterClosed(): Observable<any> {\r\n    return this._afterClosed.asObservable();\r\n  }\r\n\r\n  isInactive() {\r\n    return this._activate.isStopped;\r\n  }\r\n\r\n  activate() {\r\n    this._activate.next();\r\n    this._activate.complete();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the toast has started opening. */\r\n  afterActivate(): Observable<any> {\r\n    return this._activate.asObservable();\r\n  }\r\n\r\n  /** Reset the toast timouts */\r\n  resetTimeout() {\r\n    this._resetTimeout.next();\r\n  }\r\n}\r\n\r\n/** Custom injector type specifically for instantiating components with a toast. */\r\nexport class ToastInjector implements Injector {\r\n  constructor(\r\n    private _toastPackage: ToastPackage,\r\n    private _parentInjector: Injector\r\n  ) {}\r\n\r\n  /* tslint:disable:deprecation */\r\n  get(token: any, notFoundValue?: any): any {\r\n    if (token === ToastPackage && this._toastPackage) {\r\n      return this._toastPackage;\r\n    }\r\n    return this._parentInjector.get(token, notFoundValue);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { GlobalConfig } from './toastr-config';\r\n\r\nexport interface ToastToken {\r\n  config: GlobalConfig;\r\n  defaults: any;\r\n}\r\n\r\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\r\n","import {\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n  SecurityContext\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\nimport { Overlay } from '../overlay/overlay';\r\nimport { ComponentPortal } from '../portal/portal';\r\nimport { ToastInjector, ToastRef } from './toast-injector';\r\nimport { ToastToken, TOAST_CONFIG } from './toast-token';\r\nimport { ToastContainerDirective } from './toast.directive';\r\nimport { GlobalConfig, IndividualConfig, ToastPackage } from './toastr-config';\r\n\r\nexport interface ActiveToast<C> {\r\n  /** Your Toast ID. Use this to close it individually */\r\n  toastId: number;\r\n  /** the message of your toast. Stored to prevent duplicates */\r\n  message: string;\r\n  /** a reference to the component see portal.ts */\r\n  portal: ComponentRef<C>;\r\n  /** a reference to your toast */\r\n  toastRef: ToastRef<C>;\r\n  /** triggered when toast is active */\r\n  onShown: Observable<any>;\r\n  /** triggered when toast is destroyed */\r\n  onHidden: Observable<any>;\r\n  /** triggered on toast click */\r\n  onTap: Observable<any>;\r\n  /** available for your use in custom toast */\r\n  onAction: Observable<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class ToastrService {\r\n  toastrConfig: GlobalConfig;\r\n  currentlyActive = 0;\r\n  toasts: ActiveToast<any>[] = [];\r\n  overlayContainer: ToastContainerDirective;\r\n  previousToastMessage: string | undefined;\r\n  private index = 0;\r\n\r\n  constructor(\r\n    @Inject(TOAST_CONFIG) token: ToastToken,\r\n    private overlay: Overlay,\r\n    private _injector: Injector,\r\n    private sanitizer: DomSanitizer,\r\n    private ngZone: NgZone\r\n  ) {\r\n    const defaultConfig = new token.defaults();\r\n    this.toastrConfig = { ...defaultConfig, ...token.config };\r\n    this.toastrConfig.iconClasses = {\r\n      ...defaultConfig.iconClasses,\r\n      ...token.config.iconClasses\r\n    };\r\n  }\r\n  /** show toast */\r\n  show(\r\n    message?: string,\r\n    title?: string,\r\n    override: Partial<IndividualConfig> = {},\r\n    type = ''\r\n  ) {\r\n    return this._preBuildNotification(\r\n      type,\r\n      message,\r\n      title,\r\n      this.applyConfig(override)\r\n    );\r\n  }\r\n  /** show successful toast */\r\n  success(\r\n    message?: string,\r\n    title?: string,\r\n    override: Partial<IndividualConfig> = {}\r\n  ) {\r\n    const type = this.toastrConfig.iconClasses.success || '';\r\n    return this._preBuildNotification(\r\n      type,\r\n      message,\r\n      title,\r\n      this.applyConfig(override)\r\n    );\r\n  }\r\n  /** show error toast */\r\n  error(\r\n    message?: string,\r\n    title?: string,\r\n    override: Partial<IndividualConfig> = {}\r\n  ) {\r\n    const type = this.toastrConfig.iconClasses.error || '';\r\n    return this._preBuildNotification(\r\n      type,\r\n      message,\r\n      title,\r\n      this.applyConfig(override)\r\n    );\r\n  }\r\n  /** show info toast */\r\n  info(\r\n    message?: string,\r\n    title?: string,\r\n    override: Partial<IndividualConfig> = {}\r\n  ) {\r\n    const type = this.toastrConfig.iconClasses.info || '';\r\n    return this._preBuildNotification(\r\n      type,\r\n      message,\r\n      title,\r\n      this.applyConfig(override)\r\n    );\r\n  }\r\n  /** show warning toast */\r\n  warning(\r\n    message?: string,\r\n    title?: string,\r\n    override: Partial<IndividualConfig> = {}\r\n  ) {\r\n    const type = this.toastrConfig.iconClasses.warning || '';\r\n    return this._preBuildNotification(\r\n      type,\r\n      message,\r\n      title,\r\n      this.applyConfig(override)\r\n    );\r\n  }\r\n  /**\r\n   * Remove all or a single toast by id\r\n   */\r\n  clear(toastId?: number) {\r\n    // Call every toastRef manualClose function\r\n    for (const toast of this.toasts) {\r\n      if (toastId !== undefined) {\r\n        if (toast.toastId === toastId) {\r\n          toast.toastRef.manualClose();\r\n          return;\r\n        }\r\n      } else {\r\n        toast.toastRef.manualClose();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Remove and destroy a single toast by id\r\n   */\r\n  remove(toastId: number) {\r\n    const found = this._findToast(toastId);\r\n    if (!found) {\r\n      return false;\r\n    }\r\n    found.activeToast.toastRef.close();\r\n    this.toasts.splice(found.index, 1);\r\n    this.currentlyActive = this.currentlyActive - 1;\r\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\r\n      return false;\r\n    }\r\n    if (\r\n      this.currentlyActive < this.toastrConfig.maxOpened &&\r\n      this.toasts[this.currentlyActive]\r\n    ) {\r\n      const p = this.toasts[this.currentlyActive].toastRef;\r\n      if (!p.isInactive()) {\r\n        this.currentlyActive = this.currentlyActive + 1;\r\n        p.activate();\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determines if toast message is already shown\r\n   */\r\n  isDuplicate(message: string, resetOnDuplicate: boolean) {\r\n    for (let i = 0; i < this.toasts.length; i++) {\r\n      if (this.toasts[i].message === message) {\r\n        if (\r\n          resetOnDuplicate &&\r\n          this.toasts[i].toastRef.componentInstance.resetTimeout\r\n        ) {\r\n          this.toasts[i].toastRef.resetTimeout();\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** create a clone of global config and apply individual settings */\r\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\r\n    return { ...this.toastrConfig, ...override };\r\n  }\r\n\r\n  /**\r\n   * Find toast object by id\r\n   */\r\n  private _findToast(\r\n    toastId: number\r\n  ): { index: number; activeToast: ActiveToast<any> } | null {\r\n    for (let i = 0; i < this.toasts.length; i++) {\r\n      if (this.toasts[i].toastId === toastId) {\r\n        return { index: i, activeToast: this.toasts[i] };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Determines the need to run inside angular's zone then builds the toast\r\n   */\r\n  private _preBuildNotification(\r\n    toastType: string,\r\n    message: string | undefined,\r\n    title: string | undefined,\r\n    config: GlobalConfig\r\n  ): ActiveToast<any> | null {\r\n    if (config.onActivateTick) {\r\n      return this.ngZone.run(() =>\r\n        this._buildNotification(toastType, message, title, config)\r\n      );\r\n    }\r\n    return this._buildNotification(toastType, message, title, config);\r\n  }\r\n\r\n  /**\r\n   * Creates and attaches toast data to component\r\n   * returns null if toast is duplicate and preventDuplicates == True\r\n   */\r\n  private _buildNotification(\r\n    toastType: string,\r\n    message: string | undefined,\r\n    title: string | undefined,\r\n    config: GlobalConfig\r\n  ): ActiveToast<any> | null {\r\n    if (!config.toastComponent) {\r\n      throw new Error('toastComponent required');\r\n    }\r\n    // max opened and auto dismiss = true\r\n    if (\r\n      message &&\r\n      this.toastrConfig.preventDuplicates &&\r\n      this.isDuplicate(message, this.toastrConfig.resetTimeoutOnDuplicate)\r\n    ) {\r\n      return null;\r\n    }\r\n    this.previousToastMessage = message;\r\n    let keepInactive = false;\r\n    if (\r\n      this.toastrConfig.maxOpened &&\r\n      this.currentlyActive >= this.toastrConfig.maxOpened\r\n    ) {\r\n      keepInactive = true;\r\n      if (this.toastrConfig.autoDismiss) {\r\n        this.clear(this.toasts[0].toastId);\r\n      }\r\n    }\r\n    const overlayRef = this.overlay.create(\r\n      config.positionClass,\r\n      this.overlayContainer\r\n    );\r\n    this.index = this.index + 1;\r\n    let trustedMessage: string | SafeHtml | undefined | null = message;\r\n    if (message && config.enableHtml) {\r\n      trustedMessage = this.sanitizer.bypassSecurityTrustHtml(message);\r\n    }\r\n    const toastRef = new ToastRef(overlayRef);\r\n    const toastPackage = new ToastPackage(\r\n      this.index,\r\n      config,\r\n      trustedMessage,\r\n      title,\r\n      toastType,\r\n      toastRef\r\n    );\r\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\r\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\r\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\r\n    toastRef.componentInstance = (<any>portal)._component;\r\n    const ins: ActiveToast<any> = {\r\n      toastId: this.index,\r\n      message: message || '',\r\n      toastRef,\r\n      onShown: toastRef.afterActivate(),\r\n      onHidden: toastRef.afterClosed(),\r\n      onTap: toastPackage.onTap(),\r\n      onAction: toastPackage.onAction(),\r\n      portal\r\n    };\r\n\r\n    if (!keepInactive) {\r\n      setTimeout(() => {\r\n        ins.toastRef.activate();\r\n        this.currentlyActive = this.currentlyActive + 1;\r\n      });\r\n    }\r\n\r\n    this.toasts.push(ins);\r\n    return ins;\r\n  }\r\n}\r\n","import {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger\r\n} from '@angular/animations';\r\nimport {\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  NgZone,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { Subscription } from 'rxjs';\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Component({\r\n  selector: '[toast-component]',\r\n  template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `,\r\n  animations: [\r\n    trigger('flyInOut', [\r\n      state(\r\n        'inactive',\r\n        style({\r\n          display: 'none',\r\n          opacity: 0\r\n        })\r\n      ),\r\n      state('active', style({})),\r\n      state('removed', style({ opacity: 0 })),\r\n      transition(\r\n        'inactive => active',\r\n        animate('{{ easeTime }}ms {{ easing }}')\r\n      ),\r\n      transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\r\n    ])\r\n  ],\r\n  preserveWhitespaces: false\r\n})\r\nexport class Toast implements OnDestroy {\r\n  message?: string | SafeHtml | null;\r\n  title?: string;\r\n  options: IndividualConfig;\r\n  originalTimeout: number;\r\n  /** width of progress bar */\r\n  width = -1;\r\n  /** a combination of toast type and options.toastClass */\r\n  @HostBinding('class') toastClasses = '';\r\n  /** controls animation */\r\n  @HostBinding('@flyInOut')\r\n  state = {\r\n    value: 'inactive',\r\n    params: {\r\n      easeTime: this.toastPackage.config.easeTime,\r\n      easing: 'ease-in'\r\n    }\r\n  };\r\n  private timeout: any;\r\n  private intervalId: any;\r\n  private hideTime: number;\r\n  private sub: Subscription;\r\n  private sub1: Subscription;\r\n  private sub2: Subscription;\r\n\r\n  constructor(\r\n    protected toastrService: ToastrService,\r\n    public toastPackage: ToastPackage,\r\n    protected ngZone?: NgZone\r\n  ) {\r\n    this.message = toastPackage.message;\r\n    this.title = toastPackage.title;\r\n    this.options = toastPackage.config;\r\n    this.originalTimeout = toastPackage.config.timeOut;\r\n    this.toastClasses = `${toastPackage.toastType} ${\r\n      toastPackage.config.toastClass\r\n    }`;\r\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\r\n      this.activateToast();\r\n    });\r\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\r\n      this.remove();\r\n    });\r\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\r\n      this.resetTimeout();\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n    this.sub1.unsubscribe();\r\n    this.sub2.unsubscribe();\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeout);\r\n  }\r\n  /**\r\n   * activates toast and sets timeout\r\n   */\r\n  activateToast() {\r\n    this.state = { ...this.state, value: 'active' };\r\n    if (!this.options.disableTimeOut && this.options.timeOut) {\r\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\r\n      this.hideTime = new Date().getTime() + this.options.timeOut;\r\n      if (this.options.progressBar) {\r\n        this.outsideInterval(() => this.updateProgress(), 10);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * updates progress bar width\r\n   */\r\n  updateProgress() {\r\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const remaining = this.hideTime - now;\r\n    this.width = (remaining / this.options.timeOut) * 100;\r\n    if (this.options.progressAnimation === 'increasing') {\r\n      this.width = 100 - this.width;\r\n    }\r\n    if (this.width <= 0) {\r\n      this.width = 0;\r\n    }\r\n    if (this.width >= 100) {\r\n      this.width = 100;\r\n    }\r\n  }\r\n\r\n  resetTimeout() {\r\n    clearTimeout(this.timeout);\r\n    clearInterval(this.intervalId);\r\n    this.state = { ...this.state, value: 'active' };\r\n\r\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\r\n    this.options.timeOut = this.originalTimeout;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.outsideInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tells toastrService to remove this toast after animation time\r\n   */\r\n  remove() {\r\n    if (this.state.value === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.state = { ...this.state, value: 'removed' };\r\n    this.outsideTimeout(\r\n      () => this.toastrService.remove(this.toastPackage.toastId),\r\n      +this.toastPackage.config.easeTime\r\n    );\r\n  }\r\n  @HostListener('click')\r\n  tapToast() {\r\n    if (this.state.value === 'removed') {\r\n      return;\r\n    }\r\n    this.toastPackage.triggerTap();\r\n    if (this.options.tapToDismiss) {\r\n      this.remove();\r\n    }\r\n  }\r\n  @HostListener('mouseenter')\r\n  stickAround() {\r\n    if (this.state.value === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.options.timeOut = 0;\r\n    this.hideTime = 0;\r\n\r\n    // disable progressBar\r\n    clearInterval(this.intervalId);\r\n    this.width = 0;\r\n  }\r\n  @HostListener('mouseleave')\r\n  delayedHideToast() {\r\n    if (\r\n      this.options.disableTimeOut ||\r\n      this.options.extendedTimeOut === 0 ||\r\n      this.state.value === 'removed'\r\n    ) {\r\n      return;\r\n    }\r\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\r\n    this.options.timeOut = this.options.extendedTimeOut;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.outsideInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n\r\n  outsideTimeout(func: Function, timeout: number) {\r\n    if (this.ngZone) {\r\n      this.ngZone.runOutsideAngular(\r\n        () =>\r\n          (this.timeout = setTimeout(\r\n            () => this.runInsideAngular(func),\r\n            timeout\r\n          ))\r\n      );\r\n    } else {\r\n      this.timeout = setTimeout(() => func(), timeout);\r\n    }\r\n  }\r\n\r\n  outsideInterval(func: Function, timeout: number) {\r\n    if (this.ngZone) {\r\n      this.ngZone.runOutsideAngular(\r\n        () =>\r\n          (this.intervalId = setInterval(\r\n            () => this.runInsideAngular(func),\r\n            timeout\r\n          ))\r\n      );\r\n    } else {\r\n      this.intervalId = setInterval(() => func(), timeout);\r\n    }\r\n  }\r\n\r\n  private runInsideAngular(func: Function) {\r\n    if (this.ngZone) {\r\n      this.ngZone.run(() => func());\r\n    } else {\r\n      func();\r\n    }\r\n  }\r\n}\r\n","import { Toast } from './toast.component';\r\nimport { GlobalConfig } from './toastr-config';\r\n\r\nexport class DefaultGlobalConfig implements GlobalConfig {\r\n  // Global\r\n  maxOpened = 0;\r\n  autoDismiss = false;\r\n  newestOnTop = true;\r\n  preventDuplicates = false;\r\n  resetTimeoutOnDuplicate = false;\r\n  iconClasses = {\r\n    error: 'toast-error',\r\n    info: 'toast-info',\r\n    success: 'toast-success',\r\n    warning: 'toast-warning'\r\n  };\r\n\r\n  // Individual\r\n  toastComponent = Toast;\r\n  closeButton = false;\r\n  disableTimeOut: false;\r\n  timeOut = 5000;\r\n  extendedTimeOut = 1000;\r\n  enableHtml = false;\r\n  progressBar = false;\r\n  toastClass = 'toast';\r\n  positionClass = 'toast-top-right';\r\n  titleClass = 'toast-title';\r\n  messageClass = 'toast-message';\r\n  easing = 'ease-in';\r\n  easeTime = 300;\r\n  tapToDismiss = true;\r\n  onActivateTick = false;\r\n  progressAnimation: 'decreasing' | 'increasing' = 'decreasing';\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\n\r\nimport { Overlay } from '../overlay/overlay';\r\nimport { OverlayContainer } from '../overlay/overlay-container';\r\nimport { DefaultGlobalConfig } from './default-config';\r\nimport { TOAST_CONFIG } from './toast-token';\r\nimport { Toast } from './toast.component';\r\nimport { GlobalConfig } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [Toast],\r\n  declarations: [Toast],\r\n  entryComponents: [Toast],\r\n})\r\nexport class ToastrModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ToastrModule) {\r\n    if (parentModule) {\r\n      throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\r\n    }\r\n  }\r\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: ToastrModule,\r\n      providers: [\r\n        { provide: TOAST_CONFIG, useValue: { config, defaults: DefaultGlobalConfig } },\r\n        OverlayContainer,\r\n        Overlay,\r\n        ToastrService,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  NgModule,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { Subscription } from 'rxjs';\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Component({\r\n  selector: '[toast-component]',\r\n  template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `\r\n})\r\nexport class ToastNoAnimation implements OnDestroy {\r\n  message?: string | SafeHtml | null;\r\n  title?: string;\r\n  options: IndividualConfig;\r\n  originalTimeout: number;\r\n  /** width of progress bar */\r\n  width = -1;\r\n  /** a combination of toast type and options.toastClass */\r\n  @HostBinding('class') toastClasses = '';\r\n\r\n  @HostBinding('style.display')\r\n  get displayStyle() {\r\n    if (this.state === 'inactive') {\r\n      return 'none';\r\n    }\r\n    return 'inherit';\r\n  }\r\n\r\n  /** controls animation */\r\n  state = 'inactive';\r\n  private timeout: any;\r\n  private intervalId: any;\r\n  private hideTime: number;\r\n  private sub: Subscription;\r\n  private sub1: Subscription;\r\n  private sub2: Subscription;\r\n\r\n  constructor(\r\n    protected toastrService: ToastrService,\r\n    public toastPackage: ToastPackage,\r\n    protected appRef: ApplicationRef\r\n  ) {\r\n    this.message = toastPackage.message;\r\n    this.title = toastPackage.title;\r\n    this.options = toastPackage.config;\r\n    this.originalTimeout = toastPackage.config.timeOut;\r\n    this.toastClasses = `${toastPackage.toastType} ${\r\n      toastPackage.config.toastClass\r\n    }`;\r\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\r\n      this.activateToast();\r\n    });\r\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\r\n      this.remove();\r\n    });\r\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\r\n      this.resetTimeout();\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n    this.sub1.unsubscribe();\r\n    this.sub2.unsubscribe();\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeout);\r\n  }\r\n  /**\r\n   * activates toast and sets timeout\r\n   */\r\n  activateToast() {\r\n    this.state = 'active';\r\n    if (!this.options.disableTimeOut && this.options.timeOut) {\r\n      this.timeout = setTimeout(() => {\r\n        this.remove();\r\n      }, this.options.timeOut);\r\n      this.hideTime = new Date().getTime() + this.options.timeOut;\r\n      if (this.options.progressBar) {\r\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n      }\r\n    }\r\n    if (this.options.onActivateTick) {\r\n      this.appRef.tick();\r\n    }\r\n  }\r\n  /**\r\n   * updates progress bar width\r\n   */\r\n  updateProgress() {\r\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const remaining = this.hideTime - now;\r\n    this.width = (remaining / this.options.timeOut) * 100;\r\n    if (this.options.progressAnimation === 'increasing') {\r\n      this.width = 100 - this.width;\r\n    }\r\n    if (this.width <= 0) {\r\n      this.width = 0;\r\n    }\r\n    if (this.width >= 100) {\r\n      this.width = 100;\r\n    }\r\n  }\r\n\r\n  resetTimeout() {\r\n    clearTimeout(this.timeout);\r\n    clearInterval(this.intervalId);\r\n    this.state = 'active';\r\n\r\n    this.options.timeOut = this.originalTimeout;\r\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\r\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tells toastrService to remove this toast after animation time\r\n   */\r\n  remove() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.state = 'removed';\r\n    this.timeout = setTimeout(() =>\r\n      this.toastrService.remove(this.toastPackage.toastId)\r\n    );\r\n  }\r\n  @HostListener('click')\r\n  tapToast() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.toastPackage.triggerTap();\r\n    if (this.options.tapToDismiss) {\r\n      this.remove();\r\n    }\r\n  }\r\n  @HostListener('mouseenter')\r\n  stickAround() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.options.timeOut = 0;\r\n    this.hideTime = 0;\r\n\r\n    // disable progressBar\r\n    clearInterval(this.intervalId);\r\n    this.width = 0;\r\n  }\r\n  @HostListener('mouseleave')\r\n  delayedHideToast() {\r\n    if (\r\n      this.options.disableTimeOut ||\r\n      this.options.extendedTimeOut === 0 ||\r\n      this.state === 'removed'\r\n    ) {\r\n      return;\r\n    }\r\n    this.timeout = setTimeout(\r\n      () => this.remove(),\r\n      this.options.extendedTimeOut\r\n    );\r\n    this.options.timeOut = this.options.extendedTimeOut;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastNoAnimation],\r\n  exports: [ToastNoAnimation],\r\n  entryComponents: [ToastNoAnimation]\r\n})\r\nexport class ToastNoAnimationModule {}\r\n"]}